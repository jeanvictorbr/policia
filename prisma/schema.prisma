// Bloco de configuração do banco de dados
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Bloco de configuração do Prisma Client
generator client {
  provider = "prisma-client-js"
}

enum EnrollmentStatus {
  ENROLLED
  PASSED
  FAILED
}

// Modelo para as configurações gerais do servidor (Guild)
model GuildConfig {
  guild_id                 String  @id
  recruitment_channel_id   String?
  analysis_channel_id      String?
  promotions_channel_id    String?
  reports_channel_id       String?
  recruit_role_id          String? // << NOVO: Cargo padrão para novos recrutas
  logo_url                 String?
  

  @@map("guild_configs")
}

// NOVO MODELO: Configuração de cargos e suas TAGs
model RoleConfig {
  role_id   String @id
  guild_id  String
  name      String
  tag       String // Ex: "REC", "OF-I", "SGT"

  @@map("role_configs")
}

model Officer {
  db_id       Int      @id @default(autoincrement())
  discord_id  String
  guild_id    String
  name_fivem  String   // << RENOMEADO para clareza
  id_fivem    String   // << NOVO CAMPO
  rank        String
  join_date   DateTime @default(now())

  warnings       Warning[]
  enrollments    CourseEnrollment[]
  led_reports    ActionReport[]     @relation("LeadReports")
  participations ActionReport[]     @relation("ParticipantReports")

  @@unique([discord_id, guild_id])
  @@map("officers")
}

// ... (O resto dos modelos: Warning, Course, etc. continuam os mesmos)
model Warning {
  id           Int      @id @default(autoincrement())
  reason       String
  created_at   DateTime @default(now())
  admin_id     String
  officer_db_id Int
  officer       Officer @relation(fields: [officer_db_id], references: [db_id])
  @@map("warnings")
}
model Course {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  guild_id    String
  enrollments CourseEnrollment[]
  @@map("courses")
}
model CourseEnrollment {
  id     Int              @id @default(autoincrement())
  status EnrollmentStatus @default(ENROLLED)
  officer_db_id Int
  officer       Officer @relation(fields: [officer_db_id], references: [db_id])
  course_id     Int
  course        Course  @relation(fields: [course_id], references: [id])
  @@unique([officer_db_id, course_id])
  @@map("course_enrollments")
}
model UniformKit {
  id       Int    @id @default(autoincrement())
  name     String
  codes    String
  guild_id String
  @@map("uniform_kits")
}
model ActionReport {
  id         Int      @id @default(autoincrement())
  summary    String?
  thread_id  String   @unique
  created_at DateTime @default(now())
  guild_id   String
  lead_officer_db_id Int
  lead_officer       Officer @relation("LeadReports", fields: [lead_officer_db_id], references: [db_id])
  participants Officer[] @relation("ParticipantReports")
  @@map("action_reports")
}